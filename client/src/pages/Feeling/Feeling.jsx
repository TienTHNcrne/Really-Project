import styles from "./Feeling.module.scss";
import { PiSmileySadFill } from "react-icons/pi";
import { FaSadCry } from "react-icons/fa";
import { RiEmotionNormalFill } from "react-icons/ri";
import { HiEmojiHappy } from "react-icons/hi";
import { BiSolidHappyHeartEyes } from "react-icons/bi";
import { useState } from "react";

export default function Feeling() {
    const feel = [
        { icon: <PiSmileySadFill />, label: "Very Sad", color: "#34495e" },
        { icon: <FaSadCry />, label: "Sad", color: "#3498db" },
        { icon: <RiEmotionNormalFill />, label: "Normal", color: "#f1c40f" },
        { icon: <HiEmojiHappy />, label: "Happy", color: "#e67e22" },
        {
            icon: <BiSolidHappyHeartEyes />,
            label: "Very Happy",
            color: "rgb(255, 74, 74)",
        },
    ];

    const [currindex, setCurrindex] = useState(null);
    const [fel, setFel] = useState(null);
    const [think, setThink] = useState("");

    const advice = {
        "Very Sad": [
            "H√£y th·ª≠ vi·∫øt nh·∫≠t k√Ω ho·∫∑c nghe nh·∫°c nh·∫π nh√†ng ƒë·ªÉ gi·∫£i t·ªèa.",
            "N·∫øu c√≥ th·ªÉ, h√£y n√≥i chuy·ªán v·ªõi ng∆∞·ªùi b·∫°n tin t∆∞·ªüng.",
            "Cho b·∫£n th√¢n th·ªùi gian, ngh·ªâ ng∆°i m·ªôt ch√∫t ‚Äì b·∫°n kh√¥ng ƒë∆°n ƒë·ªôc.",
        ],
        Sad: [
            "Nghe m·ªôt b√†i nh·∫°c y√™u th√≠ch, ho·∫∑c xem m·ªôt video nh·∫π nh√†ng.",
            "B·∫°n c√≥ th·ªÉ vi·∫øt ƒëi·ªÅu khi·∫øn b·∫°n bu·ªìn ƒë·ªÉ c·∫£m th·∫•y nh·∫π l√≤ng h∆°n.",
            "Ngh·ªâ ng∆°i 5‚Äì10 ph√∫t, h√≠t th·ªü s√¢u, r·ªìi b·∫Øt ƒë·∫ßu l·∫°i nh·∫π nh√†ng.",
        ],
        Normal: [
            "B·∫°n c√≥ th·ªÉ ghi l·∫°i ƒëi·ªÅu t·ªët ƒë·∫πp nh·ªè trong ng√†y ƒë·ªÉ duy tr√¨ t√≠ch c·ª±c.",
            "D√†nh 10 ph√∫t ƒë·ªÉ th∆∞ gi√£n v√† l·∫Øng nghe b·∫£n th√¢n.",
            "Gi·ªØ th√≥i quen ƒë·ªÅu ƒë·∫∑n s·∫Ω gi√∫p b·∫°n ·ªïn ƒë·ªãnh l√¢u d√†i.",
        ],
        Happy: [
            "H√£y t·∫≠n d·ª•ng nƒÉng l∆∞·ª£ng n√†y ƒë·ªÉ ho√†n th√†nh m·ªôt vi·ªác nh·ªè b·∫°n tr√¨ ho√£n.",
            "B·∫°n c√≥ th·ªÉ chia s·∫ª ni·ªÅm vui v·ªõi b·∫°n b√® ho·∫∑c gia ƒë√¨nh.",
            "Vi·∫øt l·∫°i ƒëi·ªÅu khi·∫øn b·∫°n vui ‚Äì ƒë·ªÉ l√†m ƒë·ªông l·ª±c cho nh·ªØng ng√†y sau.",
        ],
        "Very Happy": [
            "B·∫°n ƒëang r·∫•t t√≠ch c·ª±c! Th·ª≠  h·ªçc nh·∫π ho·∫∑c h·ªó tr·ª£ b·∫°n kh√°c h√¥m nay nh√©.",
            "Ghi l·∫°i c·∫£m x√∫c n√†y ‚Äì b·∫°n c√≥ th·ªÉ lan t·ªèa n√≥ cho ng∆∞·ªùi xung quanh.",
            "T·∫≠n d·ª•ng nƒÉng l∆∞·ª£ng cao ƒë·ªÉ t·∫°o ra ƒëi·ªÅu c√≥ √≠ch, nh∆∞ ho√†n th√†nh b√†i t·∫≠p s·ªõm.",
        ],
    };

    const randomAdvice =
        fel && advice[fel]
            ? advice[fel][Math.floor(Math.random() * advice[fel].length)]
            : "";

    return (
        <div className={styles.main}>
            <h1>H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?</h1>
            <div className={styles.Feel}>
                {feel.map((value, index) => (
                    <button
                        key={index}
                        onClick={() => {
                            if (index !== currindex) {
                                setCurrindex(index);
                                setFel(value.label);
                            } else {
                                setCurrindex(null);
                                setFel(null);
                            }
                        }}
                        className={index === currindex ? styles.active : ""}
                        style={{ color: value.color }}
                    >
                        {value.icon}
                    </button>
                ))}
            </div>

            {fel && (
                <div className={styles.advice}>
                    <p>
                        <strong>L·ªùi khuy√™n h√¥m nay:</strong>
                    </p>
                    <p>{randomAdvice}</p>
                </div>
            )}

            <textarea
                placeholder="B·∫°n ƒëang nghƒ© g√¨..."
                value={think}
                onChange={(e) => setThink(e.target.value)}
            ></textarea>

            <button
                type="submit"
                className={styles.Submit}
                onClick={() => {
                    if (fel !== null || think.trim() !== "")
                        alert("C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª üíö");
                    localStorage.setItem("feel", fel);
                    localStorage.setItem("think", think);
                    setCurrindex(null);
                    setFel(null);
                    setThink("");
                }}
            >
                SUBMIT
            </button>
        </div>
    );
}
